     1: /* $Id: openxlcd.c,v 1.1 2003/12/09 22:43:28 GrosbaJ Exp $ */
     2: #include <p18cxxx.h>
     3: #include <xlcd.h>
     4: 
     5: 
     6: 
     7: /********************************************************************
     8: *       Function Name:  OpenXLCD                                    *
     9: *       Return Value:   void                                        *
    10: *       Parameters:     lcdtype: sets the type of LCD (lines)       *
    11: *       Description:    This routine configures the LCD. Based on   *
    12: *                       the Hitachi HD44780 LCD controller. The     *
    13: *                       routine will configure the I/O pins of the  *
    14: *                       microcontroller, setup the LCD for 4- or    *
    15: *                       8-bit mode and clear the display. The user  *
    16: *                       must provide three delay routines:          *
    17: *                       DelayFor18TCY() provides a 18 Tcy delay     *
    18: *                       DelayPORXLCD() provides at least 15ms delay *
    19: *                       DelayXLCD() provides at least 5ms delay     *
    20: ********************************************************************/
    21: void OpenXLCD(unsigned char lcdtype)
    22: {
    23:         // The data bits must be either a 8-bit port or the upper or
    24:         // lower 4-bits of a port. These pins are made into inputs
    25: #ifdef BIT8                             // 8-bit mode, use whole port
    26:         DATA_PORT = 0;
    27:         TRIS_DATA_PORT = 0xff;
    28: #else                                   // 4-bit mode
    29: #ifdef UPPER                            // Upper 4-bits of the port
    30:         DATA_PORT &= 0x0f;
    31:         TRIS_DATA_PORT |= 0xf0;
    32: #else                                   // Lower 4-bits of the port
    33:         DATA_PORT &= 0xf0;
    34:         TRIS_DATA_PORT |= 0x0f;
    35: #endif
    36: #endif
    37:         TRIS_RW = 0;                    // All control signals made outputs
    38:         TRIS_RS = 0;
    39:         TRIS_E = 0;
    40:         RW_PIN = 0;                     // R/W pin made low
    41:         RS_PIN = 0;                     // Register select pin made low
    42:         E_PIN = 0;                      // Clock pin made low
    43: 
    44:         // Delay for 15ms to allow for LCD Power on reset
    45:         DelayPORXLCD();
    46:         
    47:         // Setup interface to LCD
    48: #ifdef BIT8                             // 8-bit mode interface
    49:         TRIS_DATA_PORT = 0;             // Data port output
    50:         DATA_PORT = 0b00110000;         // Function set cmd(8-bit interface)
    51: #else                                   // 4-bit mode interface
    52: #ifdef UPPER                            // Upper nibble interface
    53:         TRIS_DATA_PORT &= 0x0f;
    54:         DATA_PORT &= 0x0f;
    55:         DATA_PORT |= 0b00100000;        // Function set cmd(4-bit interface)
    56: #else                                   // Lower nibble interface
    57:         TRIS_DATA_PORT &= 0xf0;
    58:         DATA_PORT &= 0xf0;
    59:         DATA_PORT |= 0b00000010;        // Function set cmd(4-bit interface)
    60: #endif
    61: #endif
    62:         E_PIN = 1;                      // Clock the cmd in
    63:         DelayFor18TCY();
    64:         E_PIN = 0;
    65:         
    66:         // Delay for at least 4.1ms
    67:         DelayXLCD();
    68: 
    69:         // Setup interface to LCD
    70: #ifdef BIT8                             // 8-bit interface
    71:         DATA_PORT = 0b00110000;         // Function set cmd(8-bit interface)
    72: #else                                   // 4-bit interface
    73: #ifdef UPPER                            // Upper nibble interface
    74:         DATA_PORT &= 0x0f;              // Function set cmd(4-bit interface)
    75:         DATA_PORT |= 0b00100000;
    76: #else                                   // Lower nibble interface
    77:         DATA_PORT &= 0xf0;              // Function set cmd(4-bit interface)
    78:         DATA_PORT |= 0b00000010;
    79: #endif
    80: #endif
    81:         E_PIN = 1;                      // Clock the cmd in
    82:         DelayFor18TCY();
    83:         E_PIN = 0;
    84: 
    85:         // Delay for at least 100us
    86:         DelayXLCD();
    87: 
    88:         // Setup interface to LCD
    89: #ifdef BIT8                             // 8-bit interface
    90:         DATA_PORT = 0b00110000;         // Function set cmd(8-bit interface)
    91: #else                                   // 4-bit interface
    92: #ifdef UPPER                            // Upper nibble interface
    93:         DATA_PORT &= 0x0f;              // Function set cmd(4-bit interface)
    94:         DATA_PORT |= 0b00100000;
    95: #else                                   // Lower nibble interface
    96:         DATA_PORT &= 0xf0;              // Function set cmd(4-bit interface)
    97:         DATA_PORT |= 0b00000010;
    98: #endif
    99: #endif
   100:         E_PIN = 1;                      // Clock cmd in
   101:         DelayFor18TCY();
   102:         E_PIN = 0;
   103: 
   104: #ifdef BIT8                             // 8-bit interface
   105:         TRIS_DATA_PORT = 0xff;          // Make data port input
   106: #else                                   // 4-bit interface
   107: #ifdef UPPER                            // Upper nibble interface
   108:         TRIS_DATA_PORT |= 0xf0;         // Make data nibble input
   109: #else                                   // Lower nibble interface
   110:         TRIS_DATA_PORT |= 0x0f;         // Make data nibble input
   111: #endif
   112: #endif
   113: 
   114:         // Set data interface width, # lines, font
   115:         while(BusyXLCD());              // Wait if LCD busy
   116:         WriteCmdXLCD(lcdtype);          // Function set cmd
   117: 
   118:         // Turn the display on then off
   119:         while(BusyXLCD());              // Wait if LCD busy
   120:         WriteCmdXLCD(DOFF&CURSOR_OFF&BLINK_OFF);        // Display OFF/Blink OFF
   121:         while(BusyXLCD());              // Wait if LCD busy
   122:         WriteCmdXLCD(DON&CURSOR_ON&BLINK_ON);           // Display ON/Blink ON
   123: 
   124:         // Clear display
   125:         while(BusyXLCD());              // Wait if LCD busy
   126:         WriteCmdXLCD(0x01);             // Clear display
   127: 
   128:         // Set entry mode inc, no shift
   129:         while(BusyXLCD());              // Wait if LCD busy
   130:         WriteCmdXLCD(SHIFT_CUR_LEFT);   // Entry Mode
   131: 
   132:         // Set DD Ram address to 0
   133:         while(BusyXLCD());              // Wait if LCD busy
   134:         SetDDRamAddr(0);                // Set Display data ram address to 0
   135: 
   136:         return;
   137: }
   138: 
